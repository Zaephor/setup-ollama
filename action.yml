---
name: Setup ollama
description: Installs and caches the ollama binary

inputs:
  ollama_endpoint:
    description: 'Ollama endpoint to check. ex: http://ollama:11434. Will setup matching version.'
    required: false
  ollama_version:
    description: 'Specific version to install. Ex: 0.11.4'
    required: false
  ollama_pull:
    description: 'CSV list of models to ensure have been pulled'
    required: false

outputs:
  version_installed:
    description: 'Version installed'
    value: ${{ steps.vars.outputs.ollama_version }}
  version_source:
    description: 'Where version was determined'
    value: ${{ steps.vars.outputs.version_source }}
  ollama_endpoint:
    description: 'Detected ollama endpoint'
    value: ${{ steps.vars.outputs.ollama_endpoint }}

runs:
  using: 'composite'
  steps:
    - name: Check for version
      id: vars
      shell: bash
      run: |
        VERSION=""
        SOURCE=""
        if [[ -n "${{ inputs.ollama_version }}" ]]; then
          SOURCE="input"
          VERSION=$(echo "${{ inputs.ollama_version }}" | tr -d '[A-z]' )
        elif [[ -n "${{ inputs.ollama_endpoint }}" ]]; then
          SOURCE="ollama_endpoint"
          RESULT=$(curl -sL "${{ inputs.ollama_endpoint }}/api/version" | jq -r '.version' | sed 's@^v@@g')
          if [[ -n "${RESULT}" && "${RESULT}" != "null" ]]; then
            VERSION=${RESULT}
          else
            echo "::error::Could not determine ollama version at ${{ inputs.ollama_endpoint }}"
            exit 1
          fi
        elif [[ -n "${OLLAMA_HOST}" ]]; then
          SOURCE="ollama_envvar"
          RESULT=$(curl -sL "${OLLAMA_HOST}/api/version" | jq -r '.version' | sed 's@^v@@g')
          if [[ -n "${RESULT}" && "${RESULT}" != "null" ]]; then
            VERSION=${RESULT}
          else
            echo "::error::Could not determine ollama version at ${OLLAMA_HOST}"
            exit 1
          fi
        else
          SOURCE="github"
          GITHUB_REPO="ollama/ollama"
          RESULT=$(curl -sL "https://api.github.com/repos/${GITHUB_REPO}/releases/latest" | jq -r ".tag_name" | sed 's@^v@@g')
          if [[ -n "${RESULT}" && "${RESULT}" != "null" ]]; then
            VERSION=${RESULT}
          else
            echo "::error::Could not determine ollama version from Github"
            exit 1
          fi
        fi
        echo "ollama_version=${VERSION}" > $GITHUB_OUTPUT
        echo "version_source=${SOURCE}" > $GITHUB_OUTPUT
        echo "ollama_endpoint=${OLLAMA_HOST:-${{ inputs.ollama_version }}}" > $GITHUB_OUTPUT
        echo "Ollama version ${VERSION} was detected from ${SOURCE}"
    - name: "Install version"
      uses: zaephor/setup-bin@main
      with:
        uri: 'https://github.com/ollama/ollama/releases/download/v${{ steps.vars.outputs.ollama_version }}/ollama-linux-amd64.tgz'
        name: 'ollama'
        version: '${{ steps.vars.outputs.ollama_version }}'
        subPath: bin

    - name: Pulling requested models
      if: inputs.ollama_pull != ''
      shell: bash
      run: |
        echo "Pulling entries:"
        while IFS= read -r line; do
          echo "::group::Pulling ${line}"
          ollama pull ${line}
          echo "::endgroup::"
        done <<< "${{ inputs.ollama_pull }}"
